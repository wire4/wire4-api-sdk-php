<?php
/**
 * BeneficiariesQueryRegisterStatus
 *
 * PHP version 5
 *
 * @category Class
 * @package  mx\wire4
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Wire4RestAPI
 *
 * Referencia de API. La API de Wire4 está organizada en torno a REST
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.11
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace mx\wire4\client\model;

use \ArrayAccess;
use \mx\wire4\ObjectSerializer;

/**
 * BeneficiariesQueryRegisterStatus Class Doc Comment
 *
 * @category Class
 * @package  mx\wire4
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BeneficiariesQueryRegisterStatus implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BeneficiariesQueryRegisterStatus';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'authorization_date' => '\DateTime',
'beneficiaries' => '\mx\wire4\client\model\AccountResponse[]',
'request_date' => '\DateTime',
'request_id' => 'string',
'status_request' => 'string',
'total_beneficiaries' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'authorization_date' => 'date-time',
'beneficiaries' => null,
'request_date' => 'date-time',
'request_id' => null,
'status_request' => null,
'total_beneficiaries' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'authorization_date' => 'authorization_date',
'beneficiaries' => 'beneficiaries',
'request_date' => 'request_date',
'request_id' => 'request_id',
'status_request' => 'status_request',
'total_beneficiaries' => 'total_beneficiaries'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'authorization_date' => 'setAuthorizationDate',
'beneficiaries' => 'setBeneficiaries',
'request_date' => 'setRequestDate',
'request_id' => 'setRequestId',
'status_request' => 'setStatusRequest',
'total_beneficiaries' => 'setTotalBeneficiaries'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'authorization_date' => 'getAuthorizationDate',
'beneficiaries' => 'getBeneficiaries',
'request_date' => 'getRequestDate',
'request_id' => 'getRequestId',
'status_request' => 'getStatusRequest',
'total_beneficiaries' => 'getTotalBeneficiaries'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_REQUEST_PENDING = 'PENDING';
const STATUS_REQUEST_AUTHORIZED = 'AUTHORIZED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusRequestAllowableValues()
    {
        return [
            self::STATUS_REQUEST_PENDING,
self::STATUS_REQUEST_AUTHORIZED,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['authorization_date'] = isset($data['authorization_date']) ? $data['authorization_date'] : null;
        $this->container['beneficiaries'] = isset($data['beneficiaries']) ? $data['beneficiaries'] : null;
        $this->container['request_date'] = isset($data['request_date']) ? $data['request_date'] : null;
        $this->container['request_id'] = isset($data['request_id']) ? $data['request_id'] : null;
        $this->container['status_request'] = isset($data['status_request']) ? $data['status_request'] : null;
        $this->container['total_beneficiaries'] = isset($data['total_beneficiaries']) ? $data['total_beneficiaries'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusRequestAllowableValues();
        if (!is_null($this->container['status_request']) && !in_array($this->container['status_request'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status_request', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets authorization_date
     *
     * @return \DateTime
     */
    public function getAuthorizationDate()
    {
        return $this->container['authorization_date'];
    }

    /**
     * Sets authorization_date
     *
     * @param \DateTime $authorization_date Fecha en que el usuario propietario del token autorizo el registro de beneficiarios
     *
     * @return $this
     */
    public function setAuthorizationDate($authorization_date)
    {
        $this->container['authorization_date'] = $authorization_date;

        return $this;
    }

    /**
     * Gets beneficiaries
     *
     * @return \mx\wire4\client\model\AccountResponse[]
     */
    public function getBeneficiaries()
    {
        return $this->container['beneficiaries'];
    }

    /**
     * Sets beneficiaries
     *
     * @param \mx\wire4\client\model\AccountResponse[] $beneficiaries Es una lista de beneficiarios obtenidos.
     *
     * @return $this
     */
    public function setBeneficiaries($beneficiaries)
    {
        $this->container['beneficiaries'] = $beneficiaries;

        return $this;
    }

    /**
     * Gets request_date
     *
     * @return \DateTime
     */
    public function getRequestDate()
    {
        return $this->container['request_date'];
    }

    /**
     * Sets request_date
     *
     * @param \DateTime $request_date Fecha en que se realizó la petición de registro de beneficiarios,
     *
     * @return $this
     */
    public function setRequestDate($request_date)
    {
        $this->container['request_date'] = $request_date;

        return $this;
    }

    /**
     * Gets request_id
     *
     * @return string
     */
    public function getRequestId()
    {
        return $this->container['request_id'];
    }

    /**
     * Sets request_id
     *
     * @param string $request_id Identificador de la petición del registro de beneficiarios
     *
     * @return $this
     */
    public function setRequestId($request_id)
    {
        $this->container['request_id'] = $request_id;

        return $this;
    }

    /**
     * Gets status_request
     *
     * @return string
     */
    public function getStatusRequest()
    {
        return $this->container['status_request'];
    }

    /**
     * Sets status_request
     *
     * @param string $status_request Indica sí la petición ya fue autorizada usando el token del usuario
     *
     * @return $this
     */
    public function setStatusRequest($status_request)
    {
        $allowedValues = $this->getStatusRequestAllowableValues();
        if (!is_null($status_request) && !in_array($status_request, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status_request', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status_request'] = $status_request;

        return $this;
    }

    /**
     * Gets total_beneficiaries
     *
     * @return int
     */
    public function getTotalBeneficiaries()
    {
        return $this->container['total_beneficiaries'];
    }

    /**
     * Sets total_beneficiaries
     *
     * @param int $total_beneficiaries Total de beneficiarios enviados en la petición
     *
     * @return $this
     */
    public function setTotalBeneficiaries($total_beneficiaries)
    {
        $this->container['total_beneficiaries'] = $total_beneficiaries;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
