<?php
/**
 * CodiOperationsFiltersRequestDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  mx\wire4
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Wire4RestAPI
 *
 * Referencia de la API de Wire4
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace mx\wire4\client\model;

use \ArrayAccess;
use \mx\wire4\ObjectSerializer;

/**
 * CodiOperationsFiltersRequestDTO Class Doc Comment
 *
 * @category Class
 * @package  mx\wire4
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CodiOperationsFiltersRequestDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CodiOperationsFiltersRequestDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'amount_from' => 'float',
        'amount_to' => 'float',
        'operation_date_from' => '\DateTime',
        'operation_date_to' => '\DateTime',
        'order_id' => 'string',
        'request_date_from' => '\DateTime',
        'request_date_to' => '\DateTime',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'amount_from' => null,
        'amount_to' => null,
        'operation_date_from' => 'date',
        'operation_date_to' => 'date',
        'order_id' => null,
        'request_date_from' => 'date',
        'request_date_to' => 'date',
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount_from' => 'amount_from',
        'amount_to' => 'amount_to',
        'operation_date_from' => 'operation_date_from',
        'operation_date_to' => 'operation_date_to',
        'order_id' => 'order_id',
        'request_date_from' => 'request_date_from',
        'request_date_to' => 'request_date_to',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount_from' => 'setAmountFrom',
        'amount_to' => 'setAmountTo',
        'operation_date_from' => 'setOperationDateFrom',
        'operation_date_to' => 'setOperationDateTo',
        'order_id' => 'setOrderId',
        'request_date_from' => 'setRequestDateFrom',
        'request_date_to' => 'setRequestDateTo',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount_from' => 'getAmountFrom',
        'amount_to' => 'getAmountTo',
        'operation_date_from' => 'getOperationDateFrom',
        'operation_date_to' => 'getOperationDateTo',
        'order_id' => 'getOrderId',
        'request_date_from' => 'getRequestDateFrom',
        'request_date_to' => 'getRequestDateTo',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_ACCEPTED = 'ACCEPTED';
    const STATUS_RECEIVED = 'RECEIVED';
    const STATUS_COMPLETED = 'COMPLETED';
    const STATUS_CANCELLED = 'CANCELLED';
    const STATUS_POSTPONED = 'POSTPONED';
    const STATUS_REJECTED = 'REJECTED';
    const STATUS_REVERSED = 'REVERSED';
    const STATUS_PENDING = 'PENDING';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ACCEPTED,
            self::STATUS_RECEIVED,
            self::STATUS_COMPLETED,
            self::STATUS_CANCELLED,
            self::STATUS_POSTPONED,
            self::STATUS_REJECTED,
            self::STATUS_REVERSED,
            self::STATUS_PENDING
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['amount_from'] = isset($data['amount_from']) ? $data['amount_from'] : null;
        $this->container['amount_to'] = isset($data['amount_to']) ? $data['amount_to'] : null;
        $this->container['operation_date_from'] = isset($data['operation_date_from']) ? $data['operation_date_from'] : null;
        $this->container['operation_date_to'] = isset($data['operation_date_to']) ? $data['operation_date_to'] : null;
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['request_date_from'] = isset($data['request_date_from']) ? $data['request_date_from'] : null;
        $this->container['request_date_to'] = isset($data['request_date_to']) ? $data['request_date_to'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount_from
     *
     * @return float
     */
    public function getAmountFrom()
    {
        return $this->container['amount_from'];
    }

    /**
     * Sets amount_from
     *
     * @param float $amount_from Es el monto minimo. Se permiten dos decimales. Ejemplo 1000.00
     *
     * @return $this
     */
    public function setAmountFrom($amount_from)
    {
        $this->container['amount_from'] = $amount_from;

        return $this;
    }

    /**
     * Gets amount_to
     *
     * @return float
     */
    public function getAmountTo()
    {
        return $this->container['amount_to'];
    }

    /**
     * Sets amount_to
     *
     * @param float $amount_to Es el monto m치ximo. Se permiten dos decimales. Ejemplo 1000.00
     *
     * @return $this
     */
    public function setAmountTo($amount_to)
    {
        $this->container['amount_to'] = $amount_to;

        return $this;
    }

    /**
     * Gets operation_date_from
     *
     * @return \DateTime
     */
    public function getOperationDateFrom()
    {
        return $this->container['operation_date_from'];
    }

    /**
     * Sets operation_date_from
     *
     * @param \DateTime $operation_date_from Es el filtro de fecha de operaci칩n \"desde\".
     *
     * @return $this
     */
    public function setOperationDateFrom($operation_date_from)
    {
        $this->container['operation_date_from'] = $operation_date_from;

        return $this;
    }

    /**
     * Gets operation_date_to
     *
     * @return \DateTime
     */
    public function getOperationDateTo()
    {
        return $this->container['operation_date_to'];
    }

    /**
     * Sets operation_date_to
     *
     * @param \DateTime $operation_date_to Es el filtro de fecha de operaci칩n \"hasta\".
     *
     * @return $this
     */
    public function setOperationDateTo($operation_date_to)
    {
        $this->container['operation_date_to'] = $operation_date_to;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string $order_id Es el order id de la petici칩n.
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets request_date_from
     *
     * @return \DateTime
     */
    public function getRequestDateFrom()
    {
        return $this->container['request_date_from'];
    }

    /**
     * Sets request_date_from
     *
     * @param \DateTime $request_date_from Es el filtro de fecha de petici칩n \"desde\".
     *
     * @return $this
     */
    public function setRequestDateFrom($request_date_from)
    {
        $this->container['request_date_from'] = $request_date_from;

        return $this;
    }

    /**
     * Gets request_date_to
     *
     * @return \DateTime
     */
    public function getRequestDateTo()
    {
        return $this->container['request_date_to'];
    }

    /**
     * Sets request_date_to
     *
     * @param \DateTime $request_date_to Es el filtro de fecha de petici칩n \"hasta\".
     *
     * @return $this
     */
    public function setRequestDateTo($request_date_to)
    {
        $this->container['request_date_to'] = $request_date_to;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Es el estado (estatus) de la petici칩n.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
